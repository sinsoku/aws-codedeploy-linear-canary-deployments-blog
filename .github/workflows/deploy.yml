name: deploy

on: push

jobs:
  canary:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: canary
    outputs:
      deployment-id: ${{ steps.code-deploy.outputs.codedeploy-deployment-id }}

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition aws-codedeploy-linear-canary-deployments-blog-svc --query taskDefinition > task-definition.json

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecs-sample-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Docker
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: aws-codedeploy-linear-canary-deployments-blog-svc
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: code-deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: aws-codedeploy-linear-canary-deployments-blog-svc
        cluster: aws-codedeploy-linear-canary-deployments-blog-ECSCluster-fzyrbZ2yEwnU
        codedeploy-appspec: appspec.yaml
        codedeploy-application: ecs-blog-app
        codedeploy-deployment-group: aws-codedeploy-linear-canary-deployments-blog-app-dg

    - name: Wait a target group for canary
      run: |
        name=$(aws deploy get-deployment --deployment-id ${{ steps.code-deploy.outputs.codedeploy-deployment-id }} \
              --query 'deploymentInfo.loadBalancerInfo.targetGroupPairInfoList[].targetGroups[1].name' \
              --output text)
        arn=$(aws elbv2 describe-target-groups --names $name \
              --query 'TargetGroups[].TargetGroupArn' \
              --output text)
        aws elbv2 wait target-in-service --target-group-arn $arn

  production:
    needs: canary
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Wait a deployment
      run: aws deploy wait deployment-successful --deployment-id ${{ needs.canary.outputs.deployment-id }}

  rollback:
    needs: [canary, production]
    if: cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Stop a deployment
      run: aws deploy stop-deployment --deployment-id ${{ needs.canary.outputs.deployment-id }} --auto-rollback-enabled
